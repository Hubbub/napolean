#!/usr/bin/env ruby
require 'bundler/setup'
require 'librato/metrics'
require 'logger'

def queue(name, value, type = :gauge)
  $log.info("Tracking #{name} as #{value}")
  $queue.add(name => { :value => value, :source => $source, :type => type, :measure_time => $report_time.to_i })
end

def queue_counter(name, value)
  queue(name, value, :counter)
end

def queue_gauge(name, value)
  queue(name, value, :gauge)
end


$log = Logger.new(STDOUT)
$log.level = Logger::DEBUG

$log.info("Starting Napolean")

config_path = ARGV[0] || "/etc/napolean.conf"
$log.info("Loading configuration from #{config_path}")
load(config_path)

$log.info("Configuring Librato Metrics for #{$librato_username}")
Librato::Metrics.authenticate $librato_username, $librato_key
$queue = Librato::Metrics::Queue.new

$start_time = Time.now

# Report the time as always being at 0 seconds so values line up in Librato.
$report_time = Time.new($start_time.year, $start_time.month, $start_time.day, $start_time.hour, $start_time.min, 0)

[ Array($collector_paths), File.expand_path("../../lib/collectors", __FILE__) ].flatten.each do |path|
  $log.info("Loading collectors from #{path}")
  Dir.glob("#{path}/*.rb").each do |collector|
    name = collector.gsub(/^collectors\/(.*)\.rb$/, "\\1")

    $log.info("Collecting metric: #{name}")
    load(collector)
  end
end

run_time = Time.now - $start_time
$log.info("Metrics gathering complete in #{run_time} seconds")
queue_gauge("system.napolean.run_time", run_time)

$log.info("Flushing queue")
unless $do_not_submit
  $queue.submit
end
